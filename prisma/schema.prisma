// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// User Management
model UserTeamMembership {
    userId String
    teamId String
    team   Team   @relation(fields: [teamId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@id([userId, teamId])
}

model Team {
    id              String               @id @default(uuid())
    name            String
    // Relate other data models to Team
    tags            Tag[]
    assetTypes      AssetType[]
    customFields    CustomField[]
    assets          Asset[]
    teamMemberships UserTeamMembership[]
}

model User {
    id              String               @id @default(uuid())
    name            String?
    email           String?              @unique
    emailVerified   DateTime?
    password        String?
    image           String?
    accounts        Account[]
    sessions        Session[]
    teamMemberships UserTeamMembership[]
}

// Data users create

model Tag {
    id          String        @id @default(uuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String
    parentId    String?
    parent      Tag?          @relation("TagToTag", fields: [parentId], references: [id])
    children    Tag[]         @relation("TagToTag")
    customField CustomField[]
    team        Team?         @relation(fields: [teamId], references: [id])
    teamId      String?
    fieldValues FieldValue[]
}

model AssetType {
    id        String        @id @default(uuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    name      String
    parentId  String?
    parent    AssetType?    @relation("AssetTypeToAssetType", fields: [parentId], references: [id])
    children  AssetType[]   @relation("AssetTypeToAssetType")
    fields    CustomField[]
    asset     Asset[]
    team      Team?         @relation(fields: [teamId], references: [id])
    teamId    String?
}

model CustomField {
    id            String       @id @default(uuid())
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    name          String
    slug          String
    fieldType     FieldType
    inputRequired Boolean
    inputMin      Int?
    inputMax      Int?
    currency      String?
    showInTable   Boolean      @default(false)
    assetTypeId   String
    assetType     AssetType    @relation(fields: [assetTypeId], references: [id])
    tagId         String?
    tag           Tag?         @relation(fields: [tagId], references: [id])
    fieldValue    FieldValue[]
    Team          Team?        @relation(fields: [teamId], references: [id])
    teamId        String?
}

enum FieldType {
    STRING
    NUMBER
    BOOLEAN
    DATE
    TIME
    DATETIME
    CURRENCY
    TAG
}

model Asset {
    id          String       @id @default(uuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    assetTypeId String
    assetType   AssetType    @relation(fields: [assetTypeId], references: [id])
    fieldValues FieldValue[]
    team        Team?        @relation(fields: [teamId], references: [id])
    teamId      String?
}

model FieldValue {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    value         String?
    assetId       String
    asset         Asset       @relation(fields: [assetId], references: [id])
    customFieldId String
    customField   CustomField @relation(fields: [customFieldId], references: [id])
    tags          Tag[]
}
